drop database if exists ecommerce;
create database ecommerce;
use ecommerce;

# 1. List all unique cities where customers are located.

select count(distinct customer_city) from customers;

# 2. Count the number of orders placed in 2017.

select count(*) from orders where year(order_purchase_timestamp) = 2017;

# 3. Find the total sales per category.

select upper(pr.product_category) as Category, round(sum(py.payment_value),2) as total_sales
from products pr 
join order_items o 
using(product_id) 
join payments py 
using(order_id) 
group by pr.product_category;

# 4. Calculate the percentage of orders that were paid in installments.

select (sum(case when payment_installments >=1 then 1 else 0 end) / count(*)) * 100  as orders_paid_in_installments
from payments;

# 5. Count the number of customers from each state.

select customer_state ,count(customer_unique_id) as number_of_customers 
from customers 
group by customer_state 
order by number_of_customers desc;


# 6. Calculate the number of orders per month in 2018.¶

select monthname(order_purchase_timestamp) as Months,count(order_id) as Orders
from orders 
where year(order_purchase_timestamp) = 2018 
group by Months;


# 7. Find the average number of products per order, grouped by customer city.¶

with count_per_order as 
(select o.order_id, o.customer_id, count(oi.order_id) as co
from orders o join order_items oi
using(order_id)
group by o.order_id, o.customer_id)

select c.customer_city, round(avg(count_per_order.co),2) as average_orders
from customers c join count_per_order
on c.customer_id = count_per_order.customer_id
group by c.customer_city
order by average_orders desc;

# 8. Calculate the percentage of total revenue contributed by each product category.

select upper(pr.product_category) as Category, round((sum(py.payment_value) / (select sum(payment_value) from payments)) * 100, 2)as total_sales_percentage
from products pr
join order_items oi
on pr.product_id = oi.product_id
join payments py
on oi.order_id = py.order_id
group by pr.product_category
order by total_sales_percentage desc;

# 9.  Identify the correlation between product price and the number of times a product has been purchased.¶

select pr.product_category, count(oi.product_id) as count_product, round(avg(oi.price),2) as price
from products pr
join order_items oi
on pr.product_id = oi.product_id
group by pr.product_category;

# 10. Calculate the total revenue generated by each seller, and rank them by revenue.

select * , dense_rank() over (order by total_revenue desc) as Rn
from
(select s.seller_id, round(sum(py.payment_value),2) as total_revenue
from sellers s 
join order_items oi
on s.seller_id = oi.seller_id
join payments py
on oi.order_id = py.order_id
group by seller_id) as a;

# 11. Calculate the moving average of order values for each customer over their order history.

select customer_id, order_purchase_timestamp, payment,
	   avg(payment) over (partition by customer_id order by order_purchase_timestamp rows between 2 preceding and current row) as moving_average
from
(select o.customer_id, o.order_purchase_timestamp, py.payment_value as payment
from orders o join payments py
on o.order_id = py.order_id) as a;

# 12. Calculate the cumulative sales per month for each year.¶

select ord_year, ord_month, payment, sum(payment) over (order by ord_year ,ord_month) as cumulative_sales
from
(select year(o.order_purchase_timestamp) as ord_year, month(o.order_purchase_timestamp) as ord_month, round(sum(py.payment_value),2) as payment
from orders o join payments py
on o.order_id = py.order_id
group by ord_year, ord_month
order by ord_year, ord_month) as a;


# 13. Calculate the year-over-year growth rate of total sales. (((current sales - previous sales) / previous sales)*100))

with cte as (select year(o.order_purchase_timestamp) as years, round(sum(payment_value),2) as sales
from orders o join payments py
on o.order_id = py.order_id
group by years
order by years)

select years, round(((sales - lag(sales, 1) over (order by years)) / lag(sales, 1) over (order by years)) * 100,3) as YOY_percentage_growth
from cte;


# 14. Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.

with a as (select customers.customer_id,
min(orders.order_purchase_timestamp) first_order
from customers join orders
on customers.customer_id = orders.customer_id
group by customers.customer_id),

b as (select a.customer_id, count(distinct orders.order_purchase_timestamp) next_order
from a join orders
on orders.customer_id = a.customer_id
and orders.order_purchase_timestamp > first_order
and orders.order_purchase_timestamp < 
date_add(first_order, interval 6 month)
group by a.customer_id) 

select 100 * (count( distinct a.customer_id)/ count(distinct b.customer_id)) as Retention_rate
from a left join b 
on a.customer_id = b.customer_id;


# 15. Identify the top 3 customers who spent the most money in each year.


with cte as (select year(o.order_purchase_timestamp) as years, o.customer_id, round(sum(py.payment_value), 3) as money_spent,
	   dense_rank() over (partition by year(o.order_purchase_timestamp) order by sum(py.payment_value) desc) as d_rank
from customers c 
join orders o
on c.customer_id = o.customer_id
join payments py
on o.order_id = py.order_id
group by years , o.customer_id)

select years, customer_id, money_spent
from cte
where d_rank < 4;


